// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const cooks = [
  {
    name: "Виктор",
    speciality: "Пицца",
  },
  {
    name: "Ольга",
    speciality: "Суши",
  },
  {
    name: "Дмитрий",
    speciality: "Десерты",
  },
];

const dishes = [
  "Пицца Маргарита",
  "Пицца Пепперони",
  "Роллы Филадельфия",
  "Роллы Калифорния",
  "Тирамису",
  "Чизкейк",
];
const cooksSpeciality = new Map();
cooksSpeciality
  .set(cooks[0], [dishes[0], dishes[1]])
  .set(cooks[1], [dishes[2], dishes[3]])
  .set(cooks[2], [dishes[4], dishes[5]]);

const guests = [
  {
    name: "Алексей",
  },
  {
    name: "Мария",
  },
  {
    name: "Ирина",
  },
];

const guestOrders = new Map();
guestOrders
  .set(guests[0], [dishes[1], dishes[4]])
  .set(guests[1], [dishes[3], dishes[0]])
  .set(guests[2], [dishes[5]]);

guestOrders.forEach((value, key) => {
  console.log(`Клиент ${key.name} заказал: ${value.join(" и ")}`);
});
